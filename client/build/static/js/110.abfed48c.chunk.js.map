{"version":3,"file":"static/js/110.abfed48c.chunk.js","mappings":"8NAGaA,EAA0BC,EAAAA,GAAAA,IAAU,8cA6BpCC,GAAYD,EAAAA,EAAAA,IAAOE,EAAAA,EAAPF,CAAoB,0QAehCG,EAAkBH,EAAAA,GAAAA,IAAU,oKAMnB,gBAAGI,EAAQ,EAARA,SAAQ,oBAAcA,EAAQ,QAG1CC,EAA4BL,EAAAA,GAAAA,IAAU,gIAQtCM,EAAgBN,EAAAA,GAAAA,KAAW,+DAK3BO,EAAiBP,EAAAA,GAAAA,KAAW,6D,SClCzC,GAAeQ,EAAAA,EAAAA,IAAQ,MAJI,SAACC,GAAQ,MAAM,CACxCC,QAAS,SAACC,GAAI,OAAKF,GAASC,EAAAA,EAAAA,IAAQC,GAAM,EAC3C,GAED,EArBuB,SAAH,GAA2B,IAArBA,EAAI,EAAJA,KAAMD,EAAO,EAAPA,QACtBE,EAA0BD,EAA1BC,KAAMC,EAAoBF,EAApBE,MAAOT,EAAaO,EAAbP,SACrB,OACE,UAACL,EAAuB,YACtB,SAACI,EAAe,CAACW,UAAU,QAAQV,SAAUA,KAC7C,UAACC,EAAyB,YACxB,SAACC,EAAa,UAAEM,KAChB,SAACL,EAAc,UAAEM,QAEnB,SAACZ,EAAS,CAACc,QAAS,kBAAML,EAAQC,EAAK,EAAEK,UAAQ,6BAMvD,G,4FCjBA,IAToB,SAACC,GAAiB,OAAK,YAAmC,IAAhCC,EAAS,EAATA,UAAcC,GAAU,YACpE,OAAOD,GACL,SAAC,IAAO,KAER,SAACD,GAAiB,UAAKE,GAE3B,CAAE,C,uKCPWC,EAA0BpB,EAAAA,GAAAA,IAAU,6FAMpCqB,EAAkBrB,EAAAA,GAAAA,GAAS,oEAK3BsB,EAA2BtB,EAAAA,GAAAA,IAAU,6P,mBCgBlD,EAjBuB,WACrB,IAAQuB,GAAiBC,EAAAA,EAAAA,MAAjBD,aACFE,GAAaC,EAAAA,EAAAA,KAAYC,EAAAA,EAAAA,IAAiBJ,IAExCK,EAAiBH,EAAjBG,MAAOC,EAAUJ,EAAVI,MACf,OACE,UAACT,EAAuB,YACtB,SAACC,EAAe,UAAEO,KAClB,SAACN,EAAwB,UACtBO,EAAMC,KAAI,SAACnB,GAAI,OACd,SAAC,IAAc,CAAeA,KAAMA,GAAfA,EAAKoB,GAAkB,QAKtD,ECpBMC,GAAkBC,EAAAA,EAAAA,IAAyB,CAC/Cf,UAAW,SAACgB,GAAK,QAAMC,EAAAA,EAAAA,IAA0BD,EAAM,IAQzD,GALgCE,EAAAA,EAAAA,KAC9B5B,EAAAA,EAAAA,IAAQwB,GACRK,EAAAA,EAF8BD,CAG9BE,E,8ICZIC,EAAa,SAACL,GAAK,OAAKA,EAAMM,IAAK,EAE5BC,GAAoBC,EAAAA,EAAAA,IAC/B,CAACH,IACD,SAACC,GAAI,OAAKA,EAAKG,WAAW,IAGfC,GAA8BF,EAAAA,EAAAA,IACzC,CAACD,IACD,SAACE,GAAW,OACVA,EAAcE,OAAOC,KAAKH,GAAab,KAAI,SAACiB,GAAG,OAAKJ,EAAYI,EAAI,IAAI,EAAE,IAGjEpB,EAAmB,SAACqB,GAAkB,OACjDN,EAAAA,EAAAA,IAAe,CAACD,IAAoB,SAACE,GAAW,OAC9CA,EAAcA,EAAYK,GAAsB,IAAI,GACpD,EAESC,GAA6BP,EAAAA,EAAAA,IACxC,CAACH,IACD,SAACC,GAAI,OAAKA,EAAKU,UAAU,IAGdf,GAA4BO,EAAAA,EAAAA,IACvC,CAACH,IACD,SAACC,GAAI,QAAOA,EAAKG,WAAW,G","sources":["componenets/collection-item/collection-item.styles.jsx","componenets/collection-item/collection-item.jsx","componenets/with-spinner/with-spinner.jsx","pages/collection/collection-page.styles.jsx","pages/collection/collection-page.jsx","pages/collection/collection.container.jsx","redux/shop/shop.selectors.js"],"sourcesContent":["import styled from 'styled-components';\r\nimport CustomButton from '../custom-button/custom-button';\r\n\r\nexport const CollectionItemContainer = styled.div`\r\n  width: 22vw;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 350px;\r\n  align-items: center;\r\n  position: relative;\r\n  &:hover {\r\n    .image {\r\n      opacity: 0.8;\r\n    }\r\n    button {\r\n      opacity: 0.85;\r\n      display: flex;\r\n    }\r\n  }\r\n  @media screen and (max-width: 800px) {\r\n    width: 40vw;\r\n    &:hover {\r\n      .image {\r\n        opacity: unset;\r\n      }\r\n      button {\r\n        opacity: unset;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const AddButton = styled(CustomButton)`\r\n  width: 80%;\r\n  opacity: 0.7;\r\n  position: absolute;\r\n  top: 255px;\r\n  display: none;\r\n  @media screen and (max-width: 800px) {\r\n    display: block;\r\n    opacity: 0.9;\r\n    min-width: unset;\r\n    padding: 0 10px;\r\n    font-size: 12px;\r\n  }\r\n`;\r\n\r\nexport const BackgroundImage = styled.div`\r\n  width: 100%;\r\n  height: 95%;\r\n  background-size: cover;\r\n  background-position: center;\r\n  margin-bottom: 5px;\r\n  background-image: ${({ imageUrl }) => `url(${imageUrl})`};\r\n`;\r\n\r\nexport const CollectionFooterContainer = styled.div`\r\n  width: 100%;\r\n  height: 5%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  font-size: 18px;\r\n`;\r\n\r\nexport const NameContainer = styled.span`\r\n  width: 90%;\r\n  margin-bottom: 15px;\r\n`;\r\n\r\nexport const PriceContainer = styled.span`\r\n  width: 10%;\r\n  text-align: right;\r\n`;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addItem } from '../../redux/cart/cart.actions';\r\n\r\nimport {\r\n  CollectionItemContainer,\r\n  CollectionFooterContainer,\r\n  AddButton,\r\n  BackgroundImage,\r\n  NameContainer,\r\n  PriceContainer\r\n} from './collection-item.styles';\r\n\r\n\r\nconst CollectionItem = ({ item, addItem }) => {\r\n  const { name, price, imageUrl } = item;\r\n  return (\r\n    <CollectionItemContainer>\r\n      <BackgroundImage className='image' imageUrl={imageUrl} />\r\n      <CollectionFooterContainer>\r\n        <NameContainer>{name}</NameContainer>\r\n        <PriceContainer>{price}</PriceContainer>\r\n      </CollectionFooterContainer>\r\n      <AddButton onClick={() => addItem(item)} inverted>\r\n        Add to cart\r\n      </AddButton>\r\n    </CollectionItemContainer>\r\n\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addItem: (item) => dispatch(addItem(item)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(CollectionItem);\r\n","import React from 'react';\r\nimport Spinner from '../spinner/spinner';\r\n\r\nconst WithSpinner = (WrappedComponenet) => ({ isLoading, ...otherProps }) => {\r\n  return isLoading ? (\r\n    <Spinner />\r\n  ) : (\r\n    <WrappedComponenet {...otherProps} />\r\n  );\r\n};\r\n\r\n\r\nexport default WithSpinner;\r\n","import styled from 'styled-components';\r\n\r\nexport const CollectionPageContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nexport const CollectionTitle = styled.h2`\r\n  font-size: 38px;\r\n  margin: 0 auto 30px;\r\n`;\r\n\r\nexport const CollectionItemsContainer = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 1fr;\r\n  grid-gap: 10px;\r\n  & > div {\r\n    margin-bottom: 30px;\r\n  }\r\n  @media screen and (max-width: 800px) {\r\n    grid-template-columns: 1fr 1fr;\r\n    grid-gap: 15px;\r\n  }\r\n`;","import React from 'react';\r\n\r\nimport { useSelector } from 'react-redux';\r\nimport { selectCollection } from '../../redux/shop/shop.selectors';\r\nimport CollectionItem from '../../componenets/collection-item/collection-item';\r\nimport {\r\n  CollectionPageContainer,\r\n  CollectionItemsContainer,\r\n  CollectionTitle,\r\n} from './collection-page.styles';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst CollectionPage = () => {\r\n  const { collectionId } = useParams();\r\n  const collection = useSelector(selectCollection(collectionId));\r\n\r\n  const { title, items } = collection;\r\n  return (\r\n    <CollectionPageContainer>\r\n      <CollectionTitle>{title}</CollectionTitle>\r\n      <CollectionItemsContainer>\r\n        {items.map((item) => (\r\n          <CollectionItem key={item.id} item={item} />\r\n        ))}\r\n      </CollectionItemsContainer>\r\n    </CollectionPageContainer>\r\n  );\r\n};\r\n\r\nexport default CollectionPage;\r\n","import { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { compose } from 'redux';\r\nimport { selectIsCOllectionsLoaded } from '../../redux/shop/shop.selectors';\r\nimport WithSpinner from '../../componenets/with-spinner/with-spinner';\r\nimport collectionPage from './collection-page';\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  isLoading: (state) => !selectIsCOllectionsLoaded(state),\r\n});\r\n\r\nconst CollectionPageContainer = compose(\r\n  connect(mapStateToProps),\r\n  WithSpinner\r\n)(collectionPage);\r\n\r\nexport default CollectionPageContainer;\r\n","import { createSelector } from 'reselect';\r\n\r\nconst selectShop = (state) => state.shop;\r\n\r\nexport const selectCollections = createSelector(\r\n  [selectShop],\r\n  (shop) => shop.collections\r\n);\r\n\r\nexport const selectCollectionsForPreview = createSelector(\r\n  [selectCollections],\r\n  (collections) =>\r\n    collections ? Object.keys(collections).map((key) => collections[key]) : []\r\n);\r\n\r\nexport const selectCollection = (collectionUrlParam) =>\r\n  createSelector([selectCollections], (collections) =>\r\n    collections ? collections[collectionUrlParam] : null\r\n  );\r\n\r\nexport const selectIsCollectionFetching = createSelector(\r\n  [selectShop],\r\n  (shop) => shop.isFetching\r\n);\r\n\r\nexport const selectIsCOllectionsLoaded = createSelector(\r\n  [selectShop],\r\n  (shop) => !!shop.collections\r\n);\r\n"],"names":["CollectionItemContainer","styled","AddButton","CustomButton","BackgroundImage","imageUrl","CollectionFooterContainer","NameContainer","PriceContainer","connect","dispatch","addItem","item","name","price","className","onClick","inverted","WrappedComponenet","isLoading","otherProps","CollectionPageContainer","CollectionTitle","CollectionItemsContainer","collectionId","useParams","collection","useSelector","selectCollection","title","items","map","id","mapStateToProps","createStructuredSelector","state","selectIsCOllectionsLoaded","compose","WithSpinner","collectionPage","selectShop","shop","selectCollections","createSelector","collections","selectCollectionsForPreview","Object","keys","key","collectionUrlParam","selectIsCollectionFetching","isFetching"],"sourceRoot":""}